from aiogram import types, Router, F
from keyboards import reply
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery
from aiogram.filters import Command, or_f

from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.orm_query import *


user_router_bizh = Router()

class MyCallback(CallbackData, prefix="my"):
    foo: str
    bar: int

def create_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑‚ö°",
        callback_data=MyCallback(foo="ex", bar=42)
    )
    return builder.as_markup()


@user_router_bizh.callback_query(MyCallback.filter(F.foo == "ex"))
async def my_callback_foo(query: CallbackQuery, callback_data: MyCallback):
    await query.message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ @Fizhen üôåüèΩ")
    print("bar =", callback_data.bar)

@user_router_bizh.message(F.text.lower() == "–±–∏–∂—é—Ç–µ—Ä–∏—è")
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é–µ—â–µ", reply_markup=reply.bizh_kb)

@user_router_bizh.message(F.text.lower() == "–∫–æ–ª—å–µ")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productKolye(session):
        await message.answer_photo(
            product.image,
            caption=f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ"
        )
    await message.answer('–ö–æ–ª—å—è ‚¨ÜÔ∏è', reply_markup=reply.order_KB)

@user_router_bizh.message(F.text.lower() == "—á–æ–∫–µ—Ä—ã")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productChoker(session):
        await message.answer_photo(
            product.image,
            caption=f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ"
        )
    await message.answer('–ß–æ–∫–µ—Ä—ã ‚¨ÜÔ∏è', reply_markup=reply.order_KB)

@user_router_bizh.message(F.text.lower() == "–∫–æ–ª—å—Ü–∞")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productRing(session):
        await message.answer_photo(
            product.image,
            caption=f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ"
        )
    await message.answer('–ö–æ–ª—å—Ü–∞ ‚¨ÜÔ∏è', reply_markup=reply.order_KB)

@user_router_bizh.message(F.text.lower() == "–ø–æ–¥–≤–µ—Å–∫–∏")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productPodveska(session):
        await message.answer_photo(
            product.image,
            caption=f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ"
        )
    await message.answer('–ü–æ–¥–≤–µ—Å–∫–∏ ‚¨ÜÔ∏è', reply_markup=reply.order_KB)

@user_router_bizh.message(F.text.lower() == "–±—Ä–∞—Å–ª–µ—Ç—ã")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productBraslet(session):
        await message.answer_photo(
            product.image,
            caption=f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ"
        )
    await message.answer('–ë—Ä–∞—Å–ª–µ—Ç—ã ‚¨ÜÔ∏è', reply_markup=reply.order_KB)

@user_router_bizh.message(F.text.lower() == "—Å–µ—Ä—å–≥–∏")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productSergy(session):
        await message.answer_photo(
            product.image,
            caption=f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ"
        )
    await message.answer('–°–µ—Ä—å–≥–∏ ‚¨ÜÔ∏è', reply_markup=reply.order_KB)


@user_router_bizh.message(F.text.lower() == "–±—Ä–µ–ª–∫–∏")
async def start(message: types.Message, session: AsyncSession):
    for product in await orm_get_productBrelky(session):
        await message.answer_photo(
            product.image,
            caption=f" {product.name}\
                                \n –û–ø–∏—Å–∞–Ω–∏–µ:  {product.description} \n –°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)} —Ç–µ–Ω–≥–µ "
        )
        await message.answer('–ë—Ä–µ–ª–∫–∏ ‚¨ÜÔ∏è  ',reply_markup=reply.order_KB)


@user_router_bizh.message(or_f(Command('order'), (F.text.lower() == "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")))
async def start(message: types.Message):
    await message.answer('–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ @F1zhen   ')